package com.restaurantpos.ui;

import com.restaurantpos.model.Makanan;
import com.restaurantpos.model.MenuItem;
import com.restaurantpos.model.Minuman;
import com.restaurantpos.model.Pesanan;
import com.restaurantpos.util.DataManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

/**
 * Frame utama untuk aplikasi POS Restaurant
 */
public class MainFrame extends JFrame {
    // Model
    private final List<Pesanan> listPesanan = new ArrayList<>();
    private final PesananTableModel tableModel;
    
    // Components
    private JPanel jPanel1;
    private JTabbedPane tabbedPaneMenu;
    private JPanel panelMakanan;
    private JPanel panelMinuman;
    private JComboBox<MenuItem> comboMakanan;
    private JComboBox<MenuItem> comboMinuman;
    private JSpinner spinnerJumlahMakanan;
    private JSpinner spinnerJumlahMinuman;
    private JButton btnTambahMakanan;
    private JButton btnTambahMinuman;
    private JTable tablePesanan;
    private JScrollPane scrollPanePesanan;
    private JLabel lblTotalHarga;
    private JButton btnCetakStruk;
    private JButton btnHapusPesanan;
    
    // Format
    private final NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(
    new Locale.Builder().setLanguage("id").setRegion("ID").build()
);
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        tableModel = new PesananTableModel(listPesanan);
        initComponents();
        initMenuItems();
        updateTotalLabel();
    }
    
    private void initMenuItems() {
        // Populate makanan combobox
        DefaultComboBoxModel<MenuItem> makananModel = new DefaultComboBoxModel<>();
        for (Makanan makanan : Makanan.getMenuMakanan()) {
            makananModel.addElement(makanan);
        }
        comboMakanan.setModel(makananModel);
        
        // Populate minuman combobox
        DefaultComboBoxModel<MenuItem> minumanModel = new DefaultComboBoxModel<>();
        for (Minuman minuman : Minuman.getMenuMinuman()) {
            minumanModel.addElement(minuman);
        }
        comboMinuman.setModel(minumanModel);
    }
    
    private void updateTotalLabel() {
        double total = tableModel.calculateTotalPrice();
        lblTotalHarga.setText("Total: " + currencyFormat.format(total));
    }
    
    private void addPesanan(MenuItem menuItem, int jumlah) {
        if (jumlah <= 0) {
            JOptionPane.showMessageDialog(this, 
                    "Jumlah pesanan harus lebih dari 0", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Pesanan pesanan = new Pesanan(menuItem, jumlah);
        tableModel.addPesanan(pesanan);
        updateTotalLabel();
    }
    
    private void clearPesanan() {
        tableModel.clearPesanan();
        updateTotalLabel();
    }
    
    private void cetakStruk() {
        if (listPesanan.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    "Tidak ada pesanan untuk dicetak!", 
                    "Peringatan", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        double totalHarga = tableModel.calculateTotalPrice();
        StrukPreviewDialog dialog = new StrukPreviewDialog(this, listPesanan, totalHarga);
        dialog.setVisible(true);
        
        // Save to file for data persistence
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmmss");
        String fileName = "pesanan_" + sdf.format(new Date());
        DataManager.savePesanan(listPesanan, fileName);
    }
    
    /**
     * Initialize components and layout (normally auto-generated by NetBeans)
     */
    private void initComponents() {
        // Set frame properties
        setTitle("Restaurant POS System");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(800, 600));
        
        // Main panel
        jPanel1 = new JPanel();
        jPanel1.setLayout(new BorderLayout(10, 10));
        jPanel1.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Menu panel with tabs
        tabbedPaneMenu = new JTabbedPane();
        
        // Makanan panel
        panelMakanan = new JPanel();
        panelMakanan.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        
        // Makanan components
        JLabel lblMakanan = new JLabel("Pilih Makanan:");
        comboMakanan = new JComboBox<>();
        JLabel lblJumlahMakanan = new JLabel("Jumlah:");
        spinnerJumlahMakanan = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1));
        btnTambahMakanan = new JButton("Tambah ke Pesanan");
        
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panelMakanan.add(lblMakanan, gbc);
        
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panelMakanan.add(comboMakanan, gbc);
        
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 0;
        panelMakanan.add(lblJumlahMakanan, gbc);
        
        gbc.gridx = 1;
        gbc.gridy = 1;
        panelMakanan.add(spinnerJumlahMakanan, gbc);
        
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.NONE;
        gbc.anchor = GridBagConstraints.CENTER;
        panelMakanan.add(btnTambahMakanan, gbc);
        
        // Minuman panel
        panelMinuman = new JPanel();
        panelMinuman.setLayout(new GridBagLayout());
        
        // Minuman components
        JLabel lblMinuman = new JLabel("Pilih Minuman:");
        comboMinuman = new JComboBox<>();
        JLabel lblJumlahMinuman = new JLabel("Jumlah:");
        spinnerJumlahMinuman = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1));
        btnTambahMinuman = new JButton("Tambah ke Pesanan");
        
        gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panelMinuman.add(lblMinuman, gbc);
        
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panelMinuman.add(comboMinuman, gbc);
        
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 0;
        panelMinuman.add(lblJumlahMinuman, gbc);
        
        gbc.gridx = 1;
        gbc.gridy = 1;
        panelMinuman.add(spinnerJumlahMinuman, gbc);
        
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.NONE;
        gbc.anchor = GridBagConstraints.CENTER;
        panelMinuman.add(btnTambahMinuman, gbc);
        
        // Add panels to tabbed pane
        tabbedPaneMenu.addTab("Makanan", panelMakanan);
        tabbedPaneMenu.addTab("Minuman", panelMinuman);
        
        // Pesanan panel
        JPanel panelPesanan = new JPanel();
        panelPesanan.setLayout(new BorderLayout(5, 5));
        panelPesanan.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), 
                "Daftar Pesanan", 
                TitledBorder.DEFAULT_JUSTIFICATION, 
                TitledBorder.DEFAULT_POSITION));
        
        // Table
        tablePesanan = new JTable(tableModel);
        scrollPanePesanan = new JScrollPane(tablePesanan);
        panelPesanan.add(scrollPanePesanan, BorderLayout.CENTER);
        
        // Total panel
        JPanel panelTotal = new JPanel();
        panelTotal.setLayout(new FlowLayout(FlowLayout.RIGHT));
        
        lblTotalHarga = new JLabel("Total: Rp 0");
        lblTotalHarga.setFont(new Font("SansSerif", Font.BOLD, 14));
        panelTotal.add(lblTotalHarga);
        
        // Button panel
        JPanel panelButtons = new JPanel();
        panelButtons.setLayout(new FlowLayout(FlowLayout.RIGHT));
        
        btnHapusPesanan = new JButton("Hapus Semua Pesanan");
        btnCetakStruk = new JButton("Cetak Struk");
        
        panelButtons.add(btnHapusPesanan);
        panelButtons.add(btnCetakStruk);
        
        // South panel (combines total and buttons)
        JPanel panelSouth = new JPanel();
        panelSouth.setLayout(new BorderLayout());
        panelSouth.add(panelTotal, BorderLayout.NORTH);
        panelSouth.add(panelButtons, BorderLayout.SOUTH);
        
        // Add components to main panel
        jPanel1.add(tabbedPaneMenu, BorderLayout.NORTH);
        jPanel1.add(panelPesanan, BorderLayout.CENTER);
        jPanel1.add(panelSouth, BorderLayout.SOUTH);
        
        // Add main panel to frame
        getContentPane().add(jPanel1);
        
        // Event Handlers
        btnTambahMakanan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                MenuItem selected = (MenuItem) comboMakanan.getSelectedItem();
                int jumlah = (Integer) spinnerJumlahMakanan.getValue();
                addPesanan(selected, jumlah);
            }
        });
        
        btnTambahMinuman.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                MenuItem selected = (MenuItem) comboMinuman.getSelectedItem();
                int jumlah = (Integer) spinnerJumlahMinuman.getValue();
                addPesanan(selected, jumlah);
            }
        });
        
        btnHapusPesanan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int confirm = JOptionPane.showConfirmDialog(
                        MainFrame.this, 
                        "Apakah Anda yakin ingin menghapus semua pesanan?", 
                        "Konfirmasi", 
                        JOptionPane.YES_NO_OPTION);
                
                if (confirm == JOptionPane.YES_OPTION) {
                    clearPesanan();
                }
            }
        });
        
        btnCetakStruk.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cetakStruk();
            }
        });
        
        // Finalize frame
        pack();
        setLocationRelativeTo(null);
    }
}